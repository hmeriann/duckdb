name: TestDeployed
on:
  workflow_call:
    inputs:
      git_ref:
        type: string
  workflow_dispatch:
    inputs:
      git_ref:
        type: string

jobs:
  tests:
    strategy:
      fail-fast: false
      matrix:
        config: [ { runner: ubuntu-latest, arch: amd64, image: 'quay.io/pypa/manylinux2014_x86_64'}, {runner: ubuntu-24.04-arm, arch: arm64, image: 'quay.io/pypa/manylinux2014_aarch64'}, { runner: ubuntu-latest, arch: amd64, image: 'quay.io/pypa/manylinux_2_28_x86_64'}, {runner: ubuntu-24.04-arm, arch: arm64, image: 'quay.io/pypa/manylinux_2_28_aarch64'}, { runner: ubuntu-latest, arch: amd64, image: 'quay.io/pypa/manylinux_2_34_x86_64'}, {runner: ubuntu-24.04-arm, arch: arm64, image: 'quay.io/pypa/manylinux_2_34_aarch64'}]

    name: Test ${{ matrix.config.image }}
    runs-on: ${{ matrix.config.runner }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        path: aaa_patch

    - name: Install pytest
      run: |
        tree aaa_patch
        git checkout ${{ inputs.git_ref }}
        git apply aaa_patch/test.patch
        python3 -m pip install pytest

    - name: Build
      shell: bash
      run: |
        export PWD=`pwd`
        docker run                                                             \
        -v$PWD:$PWD                                                            \
        -e CMAKE_BUILD_PARALLEL_LEVEL=2                                        \
        -e OVERRIDE_GIT_DESCRIBE=$OVERRIDE_GIT_DESCRIBE                        \
        -e EXTENSION_CONFIGS="$PWD/.github/config/out_of_tree_extensions.cmake;$PWD/.github/config/in_tree_extensions.cmake"    \
        -e ENABLE_EXTENSION_AUTOLOADING=1                                      \
        -e ENABLE_EXTENSION_AUTOINSTALL=1                                      \
        -e LTO=thin \
        -e EXTENSION_TESTS_ONLY=1  \
        -e BUILD_BENCHMARK=1                                                   \
        ${{ matrix.config.image }}                  \
        bash -c "yum install -y perl-IPC-Cmd && git config --global --add safe.directory $PWD && make -C $PWD"

    - name: Print platform
      shell: bash
      run: ./build/release/duckdb -c "PRAGMA platform; FORCE INSTALL iceberg FROM core_nightly;"

    - name: Print extensions PRE
      shell: bash
      run: ./build/release/duckdb -c "FROM duckdb_extensions();"

    - name: Print platform
      shell: bash
      run: |
        export PWD=`pwd`
        docker run -v$PWD:$PWD -e LOCAL_EXTENSION_REPO='http://extensions.duckdb.org' ${{ matrix.config.image }} bash -c "cd $PWD && ./build/release/test/unittest --durations yes"

  musl:
    strategy:
      fail-fast: false
      matrix:
        config: [ { runner: ubuntu-latest, arch: amd64, image: 'alpine:3'} ]

    name: Test ${{ matrix.config.image }}
    runs-on: ${{ matrix.config.runner }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        path: aaa_patch

    - name: Install pytest
      run: |
        tree aaa_patch
        git checkout ${{ inputs.git_ref }}
        git apply aaa_patch/test.patch
        python3 -m pip install pytest

    - name: Build
      shell: sh
      run: |
        export PWD=`pwd`
        docker run                                                             \
        -v$PWD:$PWD                                                            \
        -e CMAKE_BUILD_PARALLEL_LEVEL=2                                        \
        -e OVERRIDE_GIT_DESCRIBE=$OVERRIDE_GIT_DESCRIBE                        \
        -e EXTENSION_CONFIGS="$PWD/.github/config/out_of_tree_extensions.cmake;$PWD/.github/config/in_tree_extensions.cmake"    \
        -e ENABLE_EXTENSION_AUTOLOADING=1                                      \
        -e ENABLE_EXTENSION_AUTOINSTALL=1                                      \
        -e LTO=thin \
        -e EXTENSION_TESTS_ONLY=1  \
        -e BUILD_BENCHMARK=1                                                   \
        -e STATIC_LIBCPP=1   \
        ${{ matrix.config.image }}                  \
        sh -c "apk update --y -qq && apk add -qq perl && apk add -qq ccache cmake git ninja ninja-build clang19 gcc libssl3 wget zip gettext unzip build-base curl make libffi-dev zlib openssh autoconf linux-headers libunwind-dev musl && apk add -qq libgcc libstdc++ libstdc++-dev libbsd-dev && git config --global --add safe.directory $PWD && make -C $PWD"

    - name: Print platform
      shell: sh
      run: |
        export PWD=`pwd`
        docker run -v$PWD:$PWD -e LOCAL_EXTENSION_REPO='http://extensions.duckdb.org' ${{ matrix.config.image }} sh -c "apk update --y -qq && apk add -qq perl && apk add -qq ccache cmake git ninja ninja-build clang19 gcc libssl3 wget zip gettext unzip build-base curl make libffi-dev zlib openssh autoconf linux-headers libunwind-dev musl && apk add -qq libgcc libstdc++ libstdc++-dev libbsd-dev && cd $PWD && ./build/release/duckdb -c 'FORCE INSTALL iceberg FROM core_nightly;' && ./build/release/test/unittest --durations yes"


  xcode-release:
    # Builds binaries for osx_arm64 and osx_amd64
    strategy:
      fail-fast: false
      matrix:
        config: [ { runner: macos-14, arch: amd64, image: 'quay.io/pypa/manylinux2014_x86_64'}, {runner: macos-13, arch: arm64, image: 'quay.io/pypa/manylinux2014_aarch64'}]
    name: Test ${{ matrix.config.runner }}
    runs-on: ${{ matrix.config.runner }}

    env:
      EXTENSION_CONFIGS: '${GITHUB_WORKSPACE}/.github/config/out_of_tree_extensions.cmake;${GITHUB_WORKSPACE}/.github/config/in_tree_extensions.cmake'
      ENABLE_EXTENSION_AUTOLOADING: 1
      ENABLE_EXTENSION_AUTOINSTALL: 1
      LTO: thin
      EXTENSION_TESTS_ONLY: 1
      OSX_BUILD_UNIVERSAL: 1
      GEN: ninja

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: aaa_patch

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Ninja
        run: brew install ninja

      - name: Setup Ccache
        uses: hendrikmuhs/ccache-action@main
        with:
          key: ${{ github.job }}-${{ matrix.config.arch }}

      - name: Install pytest
        run: |
          python -m pip install pytest
          git checkout ${{ inputs.git_ref }}
          git apply aaa_patch/test.patch

      - name: Build
        shell: bash
        run: make

      - name: Print platform
        shell: bash
        run: ./build/release/duckdb -c "PRAGMA platform; FORCE INSTALL iceberg FROM core_nightly;"

      - name: Print extensions PRE
        shell: bash
        run: ./build/release/duckdb -c "FROM duckdb_extensions();"

      - name: Print platform
        shell: bash
        run: |
          LOCAL_EXTENSION_REPO='http://extensions.duckdb.org' ./build/release/test/unittest --durations yes

      - name: Print extensions POST
        if: always()
        shell: bash
        run: ./build/release/duckdb -c "FROM duckdb_extensions();"

